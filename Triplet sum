import java.util.Scanner;
import java.util.Arrays;
public class Solution{

    public static int tripletSum(int[] arr , int num){
        Arrays.sort(arr);
        int n = arr.length;

        int numTriplets = 0 ;// to store the total no of triplet sum present

        for(int i = 0; i < n ; i++){
            //taking the 1st element from the array and substracting it from "num" and then we will search for the
            //  remaining sum that is stored in pairSumFor
            int pairSumFor = num - arr[i];

            int numPairs = pairSum(arr , i+1 , n-1 , pairSumFor);

            numTriplets +=numPairs; // updating the numTriplets
        }
        return numTriplets;
    }

    public static int pairSum(int[]arr , int startIndex , int endIndex, int num){
        int numPair = 0; //to calculate the total no. of pairs

        while(startIndex < endIndex){
            if(arr[startIndex] + arr[endIndex] < num){
                startIndex++;
            }
            else if(arr[startIndex] + arr[endIndex] > num){
                endIndex--;
            }
            //when we found the pair
            else{
                int elementAtStart = arr[startIndex]; // storing the  value at stratIndex 
                int elementAtEnd = arr[endIndex]; // storing the value at endIndex

                //1st condition               
                //if the array is like [ 5 5 5 5] and num = 15 and PAIRSUM to find is 10
                //if the element between the startIndex and endIndex are equal then we will just calculate the no of 
                // pair they will form
                if(elementAtStart == elementAtEnd){
                    int totalElementFromStartToEnd = (endIndex - startIndex) + 1; //calculating the toatl no of elements
                    //present between the stratIndx and endIndex
                    //calculating total n0 of pair they will form
                    numPair +=( totalElementFromStartToEnd * (totalElementFromStartToEnd - 1) / 2);
                    return numPair;
                }

                //2nd condition
                //if the array is [-6 -5 -3 0 2 5 5 5 11 11 14] num = 10 
                //suppose we have to find PAIRSUM = 16 then 5+11 = 16 but here there are three 5 and two 11 
                //So here also we will calculate the no of 5 and 11 present in the array and then cal the total no of pair
                //they will form
                int tempStartIndex = startIndex + 1;
                int tempEndIndex = endIndex - 1;

                //traversing and checking no of values equal to elementAtStrat that is 5
                while(tempStartIndex <= tempEndIndex && arr[tempStartIndex] == elementAtStart){
                    tempStartIndex++;
                }
                //traversing and checking no of values equal to elementAtEnd that is 11
                while(tempEndIndex >= tempStartIndex && arr[tempEndIndex] == elementAtEnd){
                    tempEndIndex--;
                }

                int totalElementsFromStrat = (tempStartIndex - startIndex);
                int totalElementsFromEnd = (endIndex - tempEndIndex);

                numPair += (totalElementsFromStrat * totalElementsFromEnd);

                startIndex = tempStartIndex;//updating stratIndex
                endIndex = tempEndIndex;//updating End INdex

            }
        }
        return numPair;
    }
}

// import java.util.Arrays;
// public class Solution {	

// 	public static int tripletSum(int[] arr, int num) {
// 		//Your code goes here
// //         Arrays.sort(arr);
// //         int triplet=0;
// //         for(int i=0;i<arr.length-2;i++){
// //             for(int j=i+1;j<arr.length-1;j++){
// //                 for(int k=j+1;k<arr.length;k++){
// //                     if(arr[i]+arr[j]+arr[k]==num){
// //                         triplet++;
// //                     }
// //                 }
                
// //             }
// //         }
// //         return triplet;
//         int triplet=0;
//         quickSort(arr,0,arr.length-1);
//         //Arrays.sort(arr);
//         for(int i=0;i<arr.length-2;i++){
//             int j=i+1;
//             int k=arr.length-1;
//             while(j<k){
//                 if(arr[i]+arr[j]+arr[k]==num){
//                          triplet++;
//                 }
//                 else if(arr[i]+arr[j]+arr[k]<num){
//                     j++;
//                 }else{
//                     k--;
//                 }
//             }
//         }
//         return triplet;
//     }
//     public static int partition(int[]input,int si,int ei){
        
//         int pivot=input[si];
//         int count=0;
//         for(int i=si+1;i<=ei;i++){
//             if(input[i]<=pivot){
//                 count++;
//             }
//         }
//         int pivotpos=si+count;
//         int temp=input[pivotpos];
//         input[pivotpos]=pivot;
//         input[si]=temp;
//         int i=si;
//         int j=ei;
//         while(i<pivotpos && j>pivotpos){
//             if(input[i]<=pivot){
//                 i++;
//             }
//             else{
//                   if(input[j]>pivot){
//                       j--;
//                   }else{
//                     int temp1=input[i];
//                     int temp2=input[j];
//                     input[i]=temp2;
//                     input[j]=temp1;
//                 }   
//             }
//         }
//         return pivotpos;
//     }
//     public static void quickSort(int [] input,int si,int ei){
//         if(si>=ei){
//             return;
//         }
//         int pidx=partition(input,si,ei);
//         quickSort(input,si,pidx-1);
//         quickSort(input,pidx+1,ei);
        
//     }
// }
